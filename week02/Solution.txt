public class Solution {
  //350. 两个数组的交集 II
    public int[] intersect(int[] nums1, int[] nums2) {
        if (nums1.length>nums2.length) {
            return intersect(nums2,nums1);
        }

        Map<Integer,Integer> map = new HashMap<>();
        for (int num:nums1) {
            map.put(num,map.getOrDefault(num,0)+1);
        }

        int[] res = new int[nums1.length];
        int index = 0;
        for(int i = 0;i<nums2.length;i++) {
            int count = map.getOrDefault(nums2[i],0);
            if(count>0) {
                res[index++] = nums2[i];
                count--;
                if(count>0){
                    map.put(nums2[i],count);
                }else {
                    map.remove(nums2[i]);
                }
            }
        }
        return Arrays.copyOfRange(res,0,index);
    }
	
	   //59 滑动窗口的最大值
	    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length == 0 || k == 0) return new int[0];
        Deque<Integer> deque = new LinkedList<>();
        for (int i = 0; i< k ;i++) {
            while(!deque.isEmpty() && deque.peekLast()<nums[i]){
                deque.removeLast();
            }
            deque.addLast(nums[i]);
        }

        int[] res = new int[nums.length - k + 1];
        res[0] = deque.peekFirst();
        for (int i = k; i<nums.length; i++) {
            if(deque.peekFirst() == nums[i-k]){
                deque.removeFirst();
            }
           // deque.addLast(nums[i]);
            while(!deque.isEmpty() && deque.peekLast()<nums[i]){
                deque.removeLast();
            }

            deque.addLast(nums[i]);
            res[i - k + 1] = deque.peekFirst();
        }
        return res;
    }
	
	
	//412. Fizz Buzz
	 public List<String> fizzBuzz(int n) {
        List<String> res = new ArrayList<>();
 
        for (int i = 1;i<=n; i++) {
            String sb = "";
            if(i%3==0) {
                sb+="Fizz";
            }
            if(i%5==0) {
                sb+="Buzz";
            }
            if("".equals(sb)) {
                sb+=String.valueOf(i);
            }
            res.add(sb);
        }
        return res;
    }

// 242 有效的字母异位词
 public boolean isAnagram(String s, String t) {
        if (s.length()!=t.length()) return false;
        int[] table = new int[26];
        for (int i = 0; i < s.length(); i++) {
             table[s.charAt(i) - 'a']++;
         }
         for (int i = 0; i < t.length(); i++) {
             table[t.charAt(i) - 'a']--;
             if (table[t.charAt(i) - 'a'] < 0) {
                 return false;
             }
         }
         return true;
    }

//1. 两数之和
 public int[] twoSum(int[] nums, int target) {
//1.暴力循环法，两层循环 时间复杂度O(n^2)
//2.缓存法 Map
    Map<Integer,Integer> hashMap = new HashMap<>();
    for(int i =0;i<nums.length;i++){
        hashMap.put(nums[i],i);
    }
    for(int i = 0;i<nums.length;i++){
        int temp = target - nums[i];
        if(hashMap.containsKey(temp)&&hashMap.get(temp)!=i){
            return new int[] {i,hashMap.get(target - nums[i])};
        }
    }
     return new int[0];
    }

//589.N叉树的前序遍历
List<Integer> res = new ArrayList<>();
    public List<Integer> preorder(Node root) {
        if(root == null) return res;
        res.add(root.val);
        for (Node node:root.children) {
            preorder(node);
        }

        return res;
    }
//24 反转链表
public ListNode reverseList(ListNode head) {
        if (head == null || head.next == null) return head;
   
        ListNode cur = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return cur;
    }





