class Solution {
  // 岛屿数量
    public int numIslands(char[][] grid) {
        if (grid == null||grid[0].length == 0) return 0;
        int n = grid.length;
        int m = grid[0].length;
        int count = 0;
        for (int i = 0; i<n;i++) {
            for (int j = 0;j<m; j++) {
                if (grid[i][j] == '1'){
                    count++;
                    dfsLoop(grid,i,j);
                }
            }
        }
        return count;
    }

    public void dfsLoop(char[][] grid,int i, int j){
        
        if (i>=grid.length || i<0 || j>=grid[0].length || j<0 || grid[i][j] == '0') return;
        grid[i][j] = '0';
        dfsMaxing(grid,i-1,j);
        dfsMaxing(grid,i+1,j);
        dfsMaxing(grid,i,j+1);
        dfsMaxing(grid,i,j-1);
    }



//二叉树的层级遍历
 public List<List<Integer>> levelOrder(TreeNode root) {
        //广度优先遍历
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res;
        Queue<TreeNode> queu = new LinkedList<>();
        queu.offer(root);
        while(!queu.isEmpty()) {
            List<Integer> levelList = new ArrayList<>(); 
            int size = queu.size();
            for (int i = 0;i < size; i++) {
                TreeNode node = queu.poll();
                levelList.add(node.val);
                if (node.left != null) {
                    queu.offer(node.left);
                }
                if (node.right!=null) {
                    queu.offer(node.right);
                }
            }
            res.add(levelList);
        }
        return res;
    }

//买卖股票的最佳时机
public int maxProfit(int[] prices) {
        int maxMoney = 0;
        int minMoney = Integer.MAX_VALUE;
        for (int i = 0; i< prices.length; i++) {
            if (prices[i]<minMoney) {
                minMoney = prices[i];
            }else{
                maxMoney = Math.max(maxMoney, prices[i] - minMoney);
                // maxMoney =  prices[i] - minMoney;
            }
        }
        return maxMoney;
}


//买卖股票的最佳时机 Ⅱ
public int maxProfit(int[] prices) {
        int maxMoney = 0;
        for (int i = 1; i<prices.length; i++) {
            maxMoney += Math.max(0, prices[i] - prices[i-1]);
        }
        return maxMoney;
 }
 
 //455. 分发饼干
 public int findContentChildren(int[] g, int[] s) {
        if (g == null || g.length == 0 || s ==null || s.length == 0) return 0;
        Arrays.sort(g);
        Arrays.sort(s);

        int res = 0;
        int i = 0;
        int j = 0;
        while (i < g.length && j<s.length) {
            if (g[i] <= s[j]) {
                res++;
                i++;
                j++;
            }else {
                j++;
            }
        }
        return res;
    }
 
 
 











}